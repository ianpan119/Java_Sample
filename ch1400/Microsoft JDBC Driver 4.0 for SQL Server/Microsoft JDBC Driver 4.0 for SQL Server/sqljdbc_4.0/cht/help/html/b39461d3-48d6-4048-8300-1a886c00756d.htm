<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>使用進階資料類型</title><meta name="Language" content="zh-cht" /><meta name="System.Keywords" content="進階資料類型" /><meta name="Microsoft.Help.Id" content="b39461d3-48d6-4048-8300-1a886c00756d" /><meta name="Description" content="Microsoft JDBC Driver for SQL Server 會使用 JDBC 進階資料類型，將 SQL Server 資料類型轉換為 Java 程式語言可以理解的格式。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">使用進階資料類型</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Microsoft JDBC Driver for SQL Server 會使用 JDBC 進階資料類型，將 SQL Server 資料類型轉換為 Java 程式語言可以理解的格式。</p></div><h1 class="heading">備註</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>下表列出進階 SQL Server、JDBC 和 Java 程式語言資料類型之間的預設對應。</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>SQL Server 類型</p></th><th><p>JDBC 類型 (java.sql.Types)</p></th><th><p>Java 語言類型</p></th></tr><tr><td><p>varbinary(max)</p><p>image</p></td><td><p>LONGVARBINARY</p></td><td><p>byte[] (預設值)、Blob、InputStream、String</p></td></tr><tr><td><p>text</p><p>varchar(max)</p></td><td><p>LONGVARCHAR</p></td><td><p>String (預設值)、Clob、InputStream</p></td></tr><tr><td><p>ntext</p><p>nvarchar(max)</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String (預設值)、Clob、NClob (Java SE 6.0)</p></td></tr><tr><td><p>xml</p></td><td><p>LONGVARCHAR</p><p>SQLXML (Java SE 6.0)</p></td><td><p>String (預設值)、InputStream、Clob、byte[]、Blob、SQLXML (Java SE 6.0)</p></td></tr><tr><td><p>udt</p></td><td><p>VARBINARY</p></td><td><p>String (預設值)、byte[]、InputStream</p></td></tr></table></div><p>下列各節會提供如何使用 JDBC Driver 和進階資料類型的範例。</p></div><h1 class="heading">BLOB、CLOB 和 NCLOB 資料類型</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>JDBC 驅動程式會實作 java.sql.Blob、java.sql.Clob 和 java.sql.NClob 介面的所有方法。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>CLOB 值可以和 SQL Server 2005 (或更新版本) 的大數值資料型別搭配使用。更明確地說，CLOB 型別可以和 <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span> 與 <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span> 資料型別搭配使用、BLOB 型別可以和 <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> 與 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 資料型別搭配使用，而 NCLOB 型別可以和 <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> 與 <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span> 搭配使用。</p></div></div><h1 class="heading">大數值資料類型</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>在舊版的 SQL Server 中，使用大數值資料類型需要特別的處理。大數值資料類型是指資料列大小上限超出 8 KB 的資料類型。SQL Server 針對 <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span>、<span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> 和 <span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span> 資料類型提供 max 規範，以允許 2^31 個位元組這麼大的儲存值。資料表資料行和 Transact-SQL 變數可以指定 <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span>、<span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span> 或 <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> 資料類型。</p><p>使用大數值類型的主要狀況包括從資料庫擷取它們，或將它們加入資料庫中。下列章節說明完成這些工作的不同方法。</p><h1 class="heading">從資料庫擷取大數值類型</h1><div class="subsection"><p>從資料庫擷取非二進位的大數值資料類型 (例如 <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span> 資料類型) 時，有個方法是將該資料當作字元資料流來讀取。在下列範例中，<a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> 類別的 <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a> 方法可用於從資料庫擷取資料，並將該資料當作結果集傳回。而 <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 類別的 <a href="c70e210f-0288-47cc-9268-a29c45979729.htm">getCharacterStream</a> 方法可用於從結果集讀取大數值資料。</p><div class="sampleCode"><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT TOP 1 * FROM Test1");
rs.next();
Reader reader = rs.getCharacterStream(2);</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>這個相同的方法也可以用於 <span sdata="langKeyword" value="text"><span class="keyword">text</span></span>、<span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> 和 <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span> 資料類型。</p></div><p>從資料庫擷取二進位的大數值資料類型 (例如 <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> 資料類型) 時，有數種方法可供您使用。最有效的方法就是將資料當作二進位資料流來讀取，如下所示：</p><div class="sampleCode"><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT photo FROM mypics");
rs.next();
InputStream is = rs.getBinaryStream(2);</pre></span></div><p>您也可以使用 <a href="d16a0aea-6144-4fcb-bcbc-5d7daa36d327.htm">getBytes</a> 方法，將資料當作位元組陣列來讀取，如下所示：</p><div class="sampleCode"><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT photo FROM mypics");
rs.next();
byte [] b = rs.getBytes(2);</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>您也可以將資料當作 BLOB 讀取。不過，比起上面顯示的兩種方法，這個方法比較沒有效率。</p></div></div><h1 class="heading">將大數值類型加入資料庫</h1><div class="subsection"><p>以 JDBC 驅動程式上傳大型資料非常適合記憶體大小的情況，至於大於記憶體的情況，資料流則是最佳的選項。不過，上傳大型資料的最有效方式，其實是透過資料流介面。</p><p>也可以選擇使用字串或位元組，如下所示：</p><div class="sampleCode"><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("INSERT INTO test1 (c1_id, c2_vcmax) VALUES (?, ?)");
pstmt.setInt(1, 1);
pstmt.setString(2, htmlStr);
pstmt.executeUpdate();</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>此方法也可用於儲存在 <span sdata="langKeyword" value="text"><span class="keyword">text</span></span>、<span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> 和 <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span> 資料行中的值。</p></div><p>如果您在伺服器上具有影像程式庫，且必須將整個二進位影像檔上傳到 <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> 資料行，則使用 JDBC 驅動程式最有效的方法就是直接使用資料流，如下所示：</p><div class="sampleCode"><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("INSERT INTO test1 (Col1, Col2) VALUES(?,?)");
File inputFile = new File("CLOBFile20mb.jpg");
FileInputStream inStream = new FileInputStream(inputFile);
int id = 1;
pstmt.setInt(1,id);
pstmt.setBinaryStream(2, inStream);
pstmt.executeUpdate();
inStream.close();</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>使用 CLOB 或 BLOB 方法並不是上載大型資料的最有效方法。</p></div></div><h1 class="heading">修改資料庫中的大數值類型</h1><div class="subsection"><p>在多數情況下，在資料庫上更新或修改大數值的建議方法是使用 UPDATE、WRITE 和 SUBSTRING 這類 Transact-SQL 命令，透過 <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 和 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 類別傳遞參數。</p><p>如果您必須在大型文字檔 (例如封存的 HTML 檔案) 中取代文字的例項，可以使用 <b>Clob</b> 物件，如下所示：</p><div class="sampleCode"><span codeLanguage="other"><pre>String SQL = "SELECT * FROM test1;";
Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
ResultSet rs = stmt.executeQuery(SQL);
rs.next();

Clob clob = rs.getClob(2);
long pos = clob.position("dog", 1);
clob.setString(pos, "cat");
rs.updateClob(2, clob);
rs.updateRow();</pre></span></div><p>此外，您可以在伺服器上執行所有工作，而只將參數傳遞至準備好的 UPDATE 陳述式。</p><p>如需有關大數值類型的詳細資訊，請參閱《SQL Server 線上叢書》中的＜使用大數值類型＞。</p></div></div><h1 class="heading">XML 資料類型</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>SQL Server 提供的 <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型，可讓您在 SQL Server 資料庫中儲存 XML 文件和片段。<span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型是 SQL Server 中的內建資料類型，而且與其他內建類型有些相似，例如 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 與 <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span>。如同其他內建類型，您可以將 <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型當做建立資料表時的資料行類型；當做變數類型、參數類型或函數傳回的類型使用；或者在 Transact-SQL CAST 和 CONVERT 函數中使用。</p><p>在 JDBC 驅動程式 中，<span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型可以對應為字串、位元組陣列、資料流、CLOB、BLOB 或 SQLXML 物件。字串為預設值。從 JDBC Driver 2.0 版開始，JDBC Driver 提供了 JDBC 4.0 API 的支援，其中導入 SQLXML 介面。SQLXML 介面會定義與 XML 資料互動和進行操作的方法。<span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> 資料類型會對應至 SQL Server <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型。如需有關如何在具有 <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> Java 資料類型的關聯式資料庫中讀取和寫入 XML 資料的詳細資訊，請參閱＜<span sdata="link"><a href="32b7217e-1f0c-473d-9a45-176daa81584e.htm">支援 XML 資料</a></span>＞。</p><p>JDBC 驅動程式 中 <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型的實作提供下列項目的支援：</p><ul><li><p>在大多數的一般程式設計案例中，存取 XML 作為標準 Java UTF-16 字串</p></li><li><p>UTF-8 和其他 8 位元編碼 XML 的輸入</p></li><li><p>採用 UTF-16 編碼以與其他 XML 處理器和磁碟檔案進行交換時，存取 XML 作為具有開頭 BOM 的位元組陣列</p></li></ul><p>SQL Server 在 UTF-16 編碼的 XML 中需要開頭 BOM。提供 XML 參數值作為位元組陣列時，應用程式必須提供此項。SQL Server 一定會將 XML 值輸出為不含 BOM 或內嵌編碼宣告的 UTF-16 字串。擷取 XML 值當做 byte[]、BinaryStream 或 Blob 時，會將 UTF-16 BOM 附加至值的開頭。</p><p>如需有關 <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 資料類型的詳細資訊，請參閱《SQL Server 線上叢書》中的＜xml 資料類型＞。</p></div><h1 class="heading">使用者定義資料類型</h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>SQL Server 2005 中導入使用者自訂類型 (UDT)，可讓您在 SQL Server 資料庫中儲存物件和自訂資料結構，因而擴充了 SQL 類型系統的功能。UDT 可包含多個資料類型並可具有不同的行為，此點與只含單一 SQL Server 系統資料類型組的傳統別名資料類型有所不同。使用能產生可驗證程式碼並由 Microsoft .NET Common Language Runtime (CLR) 支援的任何語言，即可定義 UDT。這包括 Microsoft Visual C# 和 Visual Basic .NET。資料會公開為 .NET Framework 類別或結構的欄位和屬性，而行為則是由類別或結構的方法所定義。</p><p>在 SQL Server 中，UDT 可以用做資料表的資料行定義、Transact-SQL 批次中的變數，或是 Transact-SQL 函數或預存程序的引數。</p><p>如需有關使用者定義資料類型的詳細資訊，請參閱《SQL Server 線上叢書》中的＜使用和修改使用者定義類型的執行個體＞。</p></div><span id="seeAlsoSpan"><h1 class="heading">請參閱</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">了解 JDBC Driver 資料類型</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">將有關本主題的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\d感謝您的意見反應。開發人員撰寫小組會使用您的意見反應改善文件集。檢閱意見反應的同時，我們可能會傳送電子郵件給您要求提供進一步說明或是解決方案的意見。電子郵件地址不會用於任何其他目的，檢閱後將會刪除。%0\A如需有關%20Microsoft%20隱私權原則的詳細資訊，請參閱%20http://privacy.microsoft.com/zh-tw/default.aspx。%0\A%0\d','客戶回函');">意見反應</a>傳送給 Microsoft。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.著作權所有，並保留一切權利。</a></p></span></div></div></body></html>