<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>了解資料類型轉換</title><meta name="Language" content="zh-cht" /><meta name="System.Keywords" content="資料類型轉換" /><meta name="Microsoft.Help.Id" content="98fa7488-aac3-45b4-8aa4-83ed6ab638b4" /><meta name="Description" content="為了順利將 Java 程式語言資料類型轉換為 SQL Server 資料類型，Microsoft JDBC Driver for SQL Server 提供 JDBC 規格所需的資料類型轉換。為了增加更多彈性，Object、String 和 byte[] 這些資料類型都可以互相轉換。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">了解資料類型轉換</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>為了順利將 Java 程式語言資料類型轉換為 SQL Server 資料類型，Microsoft JDBC Driver for SQL Server 提供 JDBC 規格所需的資料類型轉換。為了增加更多彈性，<span sdata="langKeyword" value="Object"><span class="keyword">Object</span></span>、<span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 和 <span sdata="langKeyword" value="byte[]"><span class="keyword">byte[]</span></span> 這些資料類型都可以互相轉換。</p></div><h1 class="heading">Getter 方法轉換</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>根據 SQL Server 資料類型，下列圖表包含 <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 類別之 <b>get&lt;Type&gt;()</b> 方法的 JDBC 驅動程式轉換對應，以及 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 類別之 <b>get&lt;Type&gt;</b> 方法的支援轉換。</p><img alt="JDBCGetterConversions" src="../art/JDBCGetterConversions.gif" /><p>JDBC Driver 的 getter 方法所支援的轉換有三種類別：</p><ul><li><p><span class="label">不失真 (x)</span>：轉換的情況為，getter 類型與基礎伺服器類型相同或更小。例如，在基礎伺服器十進位資料行上呼叫 <b>getBigDecimal</b> 時，不需要轉換。</p></li><li><p><span class="label">轉換 (y)</span>：從數值伺服器類型轉換為 Java 語言類型，這是一般轉換並且會遵循 Java 語言轉換規則。針對這些轉換，一定會截斷有效位數 (絕對不會進位)，而溢位則會當做目的地類型的模數來處理 (也就是較小)。例如，在含有 "1.9999" 的基礎 <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 資料行上呼叫 <b>getInt</b> 將會傳回 "1"；而如果基礎 <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 值是 "3000000000"，則 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 值會溢位為 "-1294967296"。</p></li><li><p><span class="label">視資料而定 (z)</span>：從基礎字元類型到數值類型的轉換，需要字元值包含可轉換為該類型的值。不會執行其他轉換。如果該值對於 getter 類型來說太大，則該值無效。例如，如果在含有 "53" 的 varchar(50) 資料行上呼叫 <b>getInt</b>，則會當做 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 傳回值；但如果基礎值為 "xyz" 或 "3000000000"，則會擲回錯誤。</p></li></ul><p>如果針對 <span sdata="langKeyword" value="binary"><span class="keyword">binary</span></span>、<span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span>、<span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> 或 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 資料行資料類型呼叫 <b>getString</b>，此值就會傳回成十六進位字串值。</p></div><h1 class="heading">Updater 方法轉換</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>若為傳遞給 <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 類別之 <b>update&lt;Type&gt;()</b> 方法的 Java 類型資料，則適用下列轉換。</p><img alt="JDBCUpdaterConversions" src="../art/JDBC_JDBCUpdatterConversions.gif" /><p>JDBC Driver 的 updater 方法所支援的轉換有三種類別：</p><ul><li><p><span class="label">不失真 (x)</span>：轉換的情況為，updater 類型與基礎伺服器類型相同或更小。例如，在基礎伺服器十進位資料行上呼叫 <b>updateBigDecimal</b> 時，不需要轉換。</p></li><li><p><span class="label">轉換 (y)</span>：從數值伺服器類型轉換為 Java 語言類型，這是一般轉換並且會遵循 Java 語言轉換規則。針對這些轉換，一定會截斷有效位數 (絕對不會進位)，而溢位則會當做目的地 (較小) 類型的模數來處理。例如，在含有 "1.9999" 的基礎 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 資料行上呼叫 <b>updateDecimal</b> 將會傳回 "1"；而如果基礎 <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 值是 "3000000000"，則 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 值會溢位為 "-1294967296"。</p></li><li><p><span class="label">視資料而定 (z)</span>：從基礎來源資料類型轉換為目的地資料類型需要包含值可轉換為目的地類型。不會執行其他轉換。如果該值對於 getter 類型來說太大，則該值無效。例如，如果在含有 "53" 的 int 資料行上呼叫 <b>updateString</b>，更新會成功；但如果基礎字串值為 "foo" 或 "3000000000"，則會擲回錯誤。</p></li></ul><p>針對 <span sdata="langKeyword" value="binary"><span class="keyword">binary</span></span>、<span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span>、<span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> 或 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 資料行資料類型呼叫 <b>updateString</b> 時，它就會將字串值視為十六進位字串值處理。</p><p>當 SQL Server 資料行資料類型是 <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> 時，此資料值必須是有效的 <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span>。呼叫 <b>updateBytes</b>、<b>updateBinaryStream</b> 或 <b>updateBlob</b> 方法時，此資料值應該是 XML 字元的十六進位字串表示法。例如：</p><div class="sampleCode"><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div><p>請注意，如果 XML 字元採用特定字元編碼，就需要位元組順序標示 (BOM)。</p></div><h1 class="heading">Setter 方法轉換</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>若為傳遞給 <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 類別和 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 類別之 <b>set&lt;Type&gt;()</b> 方法的 Java 類型資料，則適用下列轉換。</p><img alt="JDBCSetterConversions" src="../art/JDBC_JDBCSetterConversions_v2.gif" /><p>伺服器會嘗試任何一種轉換，並會在發生失敗時傳回錯誤。</p><p>至於 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 資料類型，如果值超出 <span sdata="langKeyword" value="VARCHAR"><span class="keyword">VARCHAR</span></span> 的長度，則會對應至 <span sdata="langKeyword" value="LONGVARCHAR"><span class="keyword">LONGVARCHAR</span></span>。同樣地，如果值超出 <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> 的支援長度，則 <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> 會對應至 <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span>。這一點對 <span sdata="langKeyword" value="byte[]"><span class="keyword">byte[]</span></span> 來說也相同。長度超過 <span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span> 的值會變成 <span sdata="langKeyword" value="LONGVARBINARY"><span class="keyword">LONGVARBINARY</span></span>。</p><p>JDBC Driver 的 setter 方法所支援的轉換有兩種類別：</p><ul><li><p><span class="label">不失真 (x)</span>：轉換的數值情況為，setter 類型與基礎伺服器類型相同或更小。例如，在基礎伺服器 <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 資料行上呼叫 <b>setBigDecimal</b> 時，不需要轉換。針對數值到字元的轉換，Java <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 資料類型會轉換為 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span>。例如，以值 "53" 在 varchar(50) 資料行上呼叫 <b>setDouble</b>，就會在該目的地資料行中產生字元值 "53"。</p></li><li><p><span class="label">轉換 (y)</span>：從 Java <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 類型轉換到較小的基礎伺服器 <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 類型。這是一般轉換並會遵循 SQL Server 轉換慣例。有效位數一律會截斷 (絕不進位)，而溢位則會擲回未支援的轉換錯誤。例如，在基礎整數資料行上使用值為 "1.9999" 的 <b>updateDecimal</b>，會在目的地資料行中產生 "1"；但如果傳遞 "3000000000"，則驅動程式會擲回錯誤。</p></li><li><p><span class="label">視資料而定 (z)</span>：從 Java <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 類型轉換到基礎 SQL Server 資料類型會依下列情況而定：此驅動程式將 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 值傳送到 SQL Server，而 SQL Server 視情況執行轉換。如果 <b>sendStringParametersAsUnicode</b> 設定為 true 而且基礎 SQL Server 資料類型為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span>，SQL Server 就不允許將 <span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> 轉換為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 而且會擲回 <b>SQLServerException</b>。如果 sendStringParametersAsUnicode 設定為 false 而且基礎 SQL Server 資料類型為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span>，則 SQL Server 允許將 <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span> 轉換為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 而且不會擲回例外狀況。</p></li></ul><p>SQL Server 會執行這些轉換，並且在發生問題時將錯誤傳遞回 JDBC 驅動程式。</p><p>當 SQL Server 資料行資料類型是 <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> 時，此資料值必須是有效的 <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span>。呼叫 <b>updateBytes</b>、<b>updateBinaryStream</b> 或 <b>updateBlob</b> 方法時，此資料值應該是 XML 字元的十六進位字串表示法。例如：</p><div class="sampleCode"><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div><p>請注意，如果 XML 字元採用特定字元編碼，就需要位元組順序標示 (BOM)。</p></div><h1 class="heading">setObject 的轉換</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>若為傳遞給 <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 類別之 <b>setObject(&lt;Type&gt;)</b> 方法的 Java 類型資料，則適用下列轉換。</p><img alt="JDBCSetObjectConversions" src="../art/JDBC_JDBCSetObjectConversions.gif" /><p>不具有指定目標類型的 <b>setObject</b> 方法將使用預設對應。至於 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 資料類型，如果值超出 <span sdata="langKeyword" value="VARCHAR"><span class="keyword">VARCHAR</span></span> 的長度，則會對應至 <span sdata="langKeyword" value="LONGVARCHAR"><span class="keyword">LONGVARCHAR</span></span>。同樣地，如果值超出 <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> 的支援長度，則 <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> 會對應至 <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span>。這一點對 <span sdata="langKeyword" value="byte[]"><span class="keyword">byte[]</span></span> 來說也相同。長度超過 <span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span> 的值會變成 <span sdata="langKeyword" value="LONGVARBINARY"><span class="keyword">LONGVARBINARY</span></span>。</p><p>JDBC Driver 的 setObject 方法所支援的轉換有三種類別：</p><ul><li><p><span class="label">不失真 (x)</span>：轉換的數值情況為，setter 類型與基礎伺服器類型相同或更小。例如，在基礎伺服器 <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 資料行上呼叫 <b>setBigDecimal</b> 時，不需要轉換。針對數值到字元的轉換，Java <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 資料類型會轉換為 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span>。例如，以值 "53" 在 varchar(50) 資料行上呼叫 <b>setDouble</b>，會在該目的地資料行中產生字元值 "53"。</p></li><li><p><span class="label">轉換 (y)</span>：從 Java <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 類型轉換到較小的基礎伺服器 <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 類型。這是一般轉換並會遵循 SQL Server 轉換慣例。有效位數一律會截斷 (絕不進位)，而溢位則會擲出未支援的轉換錯誤。例如，在基礎整數資料行上使用值為 "1.9999" 的 <b>updateDecimal</b>，會在目的地資料行中產生 "1"；但如果傳遞 "3000000000"，則驅動程式會擲回錯誤。</p></li><li><p><span class="label">視資料而定 (z)</span>：從 Java <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 類型轉換到基礎 SQL Server 資料類型會依下列情況而定：此驅動程式將 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 值傳送到 SQL Server，而 SQL Server 視情況執行轉換。如果 <b>sendStringParametersAsUnicode</b> 連接屬性設定為 true 而且基礎 SQL Server 資料類型為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span>，SQL Server 就不允許將 <span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> 轉換為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 而且會擲回 SQLServerException。如果 <b>sendStringParametersAsUnicode</b> 設定為 false 而且基礎 SQL Server 資料類型為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span>，則 SQL Server 允許將 <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span> 轉換為 <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> 而且不會擲回例外狀況。</p></li></ul><p>SQL Server 會執行大量 set 轉換，並且在發生問題時將錯誤傳遞回 JDBC 驅動程式。用戶端轉換是例外狀況，並且只能在 <span sdata="langKeyword" value="date"><span class="keyword">date</span></span>、<span sdata="langKeyword" value="time"><span class="keyword">time</span></span>、<span sdata="langKeyword" value="timestamp"><span class="keyword">timestamp</span></span>、<span sdata="langKeyword" value="Boolean"><span class="keyword">Boolean</span></span> 和 <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 值中執行。</p><p>當 SQL Server 資料行資料類型是 <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> 時，此資料值必須是有效的 <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span>。呼叫 setObject(byte[], SQLXML)、setObject(inputStream, SQLXML) 或 setObject(Blob, SQLXML) 方法時，此資料值應該是 XML 字元的十六進位字串表示法。例如：</p><div class="sampleCode"><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div><p>請注意，如果 XML 字元採用特定字元編碼，就需要位元組順序標示 (BOM)。</p></div><span id="seeAlsoSpan"><h1 class="heading">請參閱</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">了解 JDBC Driver 資料類型</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">將有關本主題的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\d感謝您的意見反應。開發人員撰寫小組會使用您的意見反應改善文件集。檢閱意見反應的同時，我們可能會傳送電子郵件給您要求提供進一步說明或是解決方案的意見。電子郵件地址不會用於任何其他目的，檢閱後將會刪除。%0\A如需有關%20Microsoft%20隱私權原則的詳細資訊，請參閱%20http://privacy.microsoft.com/zh-tw/default.aspx。%0\A%0\d','客戶回函');">意見反應</a>傳送給 Microsoft。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.著作權所有，並保留一切權利。</a></p></span></div></div></body></html>