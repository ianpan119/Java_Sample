<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>了解 XA 交易</title><meta name="Language" content="zh-cht" /><meta name="System.Keywords" content="分散式交易" /><meta name="System.Keywords" content="XA 交易" /><meta name="Microsoft.Help.Id" content="574e326f-0520-4003-bdf1-62d92c3db457" /><meta name="Description" content="Microsoft JDBC Driver for SQL Server 提供 Java Platform Enterprise Edition/JDBC 2.0 選擇性分散式交易的支援。從 SQLServerXADataSource 類別取得的 JDBC 連接可參與標準分散式交易處理環境，例如 Java Platform Enterprise Edition (Java EE) 應用程式伺服器。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">了解 XA 交易</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Microsoft JDBC Driver for SQL Server 提供 Java Platform Enterprise Edition/JDBC 2.0 選擇性分散式交易的支援。從 <a href="95fc7b07-2498-4a7e-8f7f-ee0d86b598b4.htm">SQLServerXADataSource</a> 類別取得的 JDBC 連接可參與標準分散式交易處理環境，例如 Java Platform Enterprise Edition (Java EE) 應用程式伺服器。</p></div><h1 class="heading">備註</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>分散式交易實作的類別如下：</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>類別</p></th><th><p>實作</p></th><th><p>描述</p></th></tr><tr><td><p>com.microsoft.sqlserver.jdbc.SQLServerXADataSource</p></td><td><p>javax.sql.XADataSource</p></td><td><p>分散式連接的 Class Factory。</p></td></tr><tr><td><p>com.microsoft.sqlserver.jdbc.SQLServerXAResource</p></td><td><p>javax.transaction.xa.XAResource</p></td><td><p>交易管理員的資源配接器。</p></td></tr></table></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>XA 分散式交易連接會預設為「讀取認可」隔離等級。</p></div></div><h1 class="heading">使用 XA 交易時的指導方針和限制</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>下列額外指導方針適用於緊密繫結的交易：</p><ul><li><p>當您將 XA 交易與 Microsoft 分散式交易協調器 (MS DTC) 一起使用時，可能會注意到目前版本的 MS DTC 不支援緊密繫結的 XA 分支行為。例如，MS DTC 在 XA 分支交易識別碼 (XID) 與 MS DTC 交易識別碼之間擁有一對一的對應，而且由鬆散繫結之 XA 分支所執行的工作會彼此隔離。</p><p>在＜<a href="http://support.microsoft.com/kb/938653">MSDTC 和緊密繫結的交易</a>＞(機器翻譯) 所提供的 Hotfix 可以支援緊密繫結的 XA 分支，其中具有相同全域交易識別碼 (GTRID) 的多個 XA 分支會對應到單一 MS DTC 交易識別碼。這個支援可讓多個緊密結合的 XA 分支查看彼此在資源管理員 (例如 SQL Server) 中的變更。</p></li><li><p><a href="379857c3-9de1-4964-8782-32df317cbfbb.htm">SSTRANSTIGHTLYCPLD</a> 旗標可讓應用程式使用 XA 分支交易識別碼 (BQUAL) 不同，但全域交易識別碼 (GTRID) 和格式識別碼 (FormatID) 相同之緊密結合的 XA 交易。若要使用該功能，您必須在 <b>XAResource.start</b> 方法的 <b>flags</b> 參數上，設定 <a href="379857c3-9de1-4964-8782-32df317cbfbb.htm">SSTRANSTIGHTLYCPLD</a>。</p><div class="sampleCode"><span codeLanguage="other"><pre>xaRes.start(xid, SQLServerXAResource.SSTRANSTIGHTLYCPLD);</pre></span></div></li></ul></div><h1 class="heading">組態指示</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>如果要將 XA 資料來源與 Microsoft 分散式交易協調器 (MS DTC) 搭配使用，來處理分散式交易，則需要下列步驟。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>JDBC 分散式交易元件會包含在 JDBC 驅動程式安裝的 xa 目錄中。這些元件包括 xa_install.sql 及 sqljdbc_xa.dll 檔案。</p></div><h1 class="heading">執行 MS DTC 服務</h1><div class="subsection"><p>應該在服務管理員中將 MS DTC 服務標示為 <span class="ui">[自動]</span>，以確定啟動 SQL Server 服務時，便執行該服務。若要啟用 MS DTC 以用於 XA 交易，您必須遵循下列步驟：</p><p>在 Windows Vista 及更新的版本上：</p><ol><li><p>按一下 [開始] 按鈕、在 [開始搜尋] 方塊中輸入 <span class="input">dcomcnfg</span>，然後按下 ENTER 開啟 [元件服務]。您也可以在 [開始搜尋] 方塊中輸入 %windir%\system32\comexp.msc，開啟 [元件服務]。</p></li><li><p>依序展開 [元件服務]、[電腦]、[我的電腦] 和 [分散式交易協調器]。</p></li><li><p>以滑鼠右鍵按一下 [本機 DTC]，然後選取 [內容]。</p></li><li><p>按一下 [本機 DTC 內容] 對話方塊中的 [安全性] 索引標籤。</p></li><li><p>選取 [啟用 XA 交易] 核取方塊，然後按一下 [確定]。這將導致 MS DTC 服務重新啟動。</p></li><li><p>再按一下 [確定] 關閉 [內容] 對話方塊，然後關閉 [元件服務]。</p></li><li><p>停止然後重新啟動 SQL Server，以確保其與 MS DTC 變更保持同步。</p></li></ol></div><h1 class="heading">設定 JDBC 分散式交易元件</h1><div class="subsection"><p>您可以遵循下列步驟，來設定 JDBC 驅動程式分散式交易元件：</p><ol><li><p>將新的 sqljdbc_xa.dll 從 JDBC 驅動程式安裝目錄複製到將參與分散式交易之每一部 SQL Server 電腦的 Binn 目錄。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p> 如果您搭配 32 位元的 SQL Server 使用 XA 交易，即使 SQL Server 安裝在 x64 處理器上，也請使用 x86 資料夾中的 sqljdbc_xa.dll 檔。如果您在 x64 處理器上，搭配 64 位元的 SQL Server 使用 XA 交易，請使用 x64 資料夾中的 sqljdbc_xa.dll 檔。</p></div></li><li><p>在每一個將參與分散式交易的 SQL Server 執行個體上執行資料庫指令碼 xa_install.sql。這個指令碼就會安裝 sqljdbc_xa.dll 所呼叫的擴充預存程序。這些擴充預存程序會實作 Microsoft JDBC Driver for SQL Server 的分散式交易和 XA 支援。您將需要以 SQL Server 執行個體的系統管理員身分執行此指令碼。</p></li><li><p>若要授與權限給特定使用者以使用 JDBC Driver 參與分散式交易，請將該使用者新增至 SqlJDBCXAUser 角色。</p></li></ol><p>您一次只能針對每個 SQL Server 執行個體設定單一 sqljdbc_xa.dll 組件版本。應用程式可能必須使用不同的 JDBC 驅動程式版本，透過 XA 連接連接至相同的 SQL Server 執行個體。在該情況下，您就必須在 SQL Server 執行個體上安裝隨附於最新 JDBC 驅動程式的 sqljdbc_xa.dll。</p><p>有三種方式可確認目前安裝在 SQL Server 執行個體上的 sqljdbc_xa.dll 版本：</p><ol><li><p>開啟即將參與分散式交易之 SQL Server 電腦的 LOG 目錄。選取並開啟 SQL Server "ERRORLOG" 檔案。在 "ERRORLOG" 檔案中搜尋 "Using 'SQLJDBC_XA.dll' version ..." 片語。</p></li><li><p>開啟即將參與分散式交易之 SQL Server 電腦的 Binn 目錄。選取 sqljdbc_xa.dll 組件。</p><ul><li><p>在 Windows Vista 或更新版本上：以滑鼠右鍵按一下 sqljdbc_xa.dll，然後選取 [內容]。接著，按一下 [詳細資料] 索引標籤。<span class="ui">[檔案版本]</span> 欄位就會顯示目前安裝在 SQL Server 執行個體上的 sqljdbc_xa.dll 版本。</p></li></ul></li><li><p>依照下一節的程式碼範例所示，設定記錄功能。在輸出記錄檔案中搜尋 "Server XA DLL version:..." 片語。</p></li></ol></div><h1 class="heading">升級 sqljdbc_xa.dll</h1><div class="subsection"><p>當您安裝新版 JDBC 驅動程式時，也應該使用新版的 sqljdbc_xa.dll 來升級伺服器上的 sqljdbc_xa.dll。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>您應該在維護時段或者沒有任何 MS DTC 交易正在進行時升級 sqljdbc_xa.dll。</p></div><ol><li><p>使用 Transact-SQL 命令 <b>DBCC sqljdbc_xa (FREE)</b> 來卸載 sqljdbc_xa.dll。</p></li><li><p>將新的 sqljdbc_xa.dll 從 JDBC 驅動程式安裝目錄複製到將參與分散式交易之每一部 SQL Server 電腦的 Binn 目錄。</p><p>當系統呼叫 sqljdbc_xa.dll 中的擴充程序時，就會載入新的 DLL。您不需要重新啟動 SQL Server 以載入新的定義。</p></li></ol></div><h1 class="heading">設定使用者定義角色</h1><div class="subsection"><p>若要授與權限給特定使用者以使用 JDBC Driver 參與分散式交易，請將該使用者新增至 SqlJDBCXAUser 角色。例如，使用下列 Transact-SQL 程式碼，將名為 'shelby' (SQL 標準登入使用者名稱為 'shelby') 的使用者加入至 SqlJDBCXAUser 角色：</p><div class="sampleCode"><span codeLanguage="other"><pre>USE master
GO
EXEC sp_grantdbaccess 'shelby', 'shelby'
GO
EXEC sp_addrolemember [SqlJDBCXAUser], 'shelby'</pre></span></div><p>每一個資料庫都會定義 SQL 使用者自訂角色。若要基於安全目的來建立您自己的角色，您將必須在每一個資料庫中定義角色，然後在每一個資料庫中新增使用者。SqlJDBCXAUser 角色一定是定義在 master 資料庫中，因為它是用來授與存取 SQL JDBC 擴充預存程序 (位於 master 資料庫) 的權限。您必須先授與個別使用者存取 master 的權限，然後在您登入 master 資料庫時，再授與他們存取 SqlJDBCXAUser 角色的權限。</p></div></div><h1 class="heading">範例</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><div class="sampleCode"><span codeLanguage="other"><pre>import java.net.Inet4Address;
import java.sql.*;
import java.util.Random;
import javax.transaction.xa.*;
import javax.sql.*;
import com.microsoft.sqlserver.jdbc.*;

public class testXA {

   public static void main(String[] args) throws Exception {

      // Create variables for the connection string.
      String prefix = "jdbc:sqlserver://";
      String serverName = "localhost";
      int portNumber = 1433;
      String databaseName = "AdventureWorks"; 
      String user = "UserName"; 
      String password = "*****";
      String connectionUrl = prefix + serverName + ":" + portNumber
         + ";databaseName=" + databaseName + ";user=" + user + ";password=" + password;

      try {
         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         Connection con = DriverManager.getConnection(connectionUrl);

         // Create a test table.
         Statement stmt = con.createStatement();
         try {
            stmt.executeUpdate("DROP TABLE XAMin"); 
         }
         catch (Exception e) {
         }
         stmt.executeUpdate("CREATE TABLE XAMin (f1 int, f2 varchar(max))");
         stmt.close();
         con.close();

         // Create the XA data source and XA ready connection.
         SQLServerXADataSource ds = new SQLServerXADataSource();
         ds.setUser(user);
         ds.setPassword(password);
         ds.setServerName(serverName);
         ds.setPortNumber(portNumber);
         ds.setDatabaseName(databaseName);
         XAConnection xaCon = ds.getXAConnection();
         con = xaCon.getConnection();

         // Get a unique Xid object for testing.
         XAResource xaRes = null;
         Xid xid = null;
         xid = XidImpl.getUniqueXid(1);

         // Get the XAResource object and set the timeout value.
         xaRes = xaCon.getXAResource();
         xaRes.setTransactionTimeout(0);

         // Perform the XA transaction.
         System.out.println("Write -&gt; xid = " + xid.toString());
         xaRes.start(xid,XAResource.TMNOFLAGS);
         PreparedStatement pstmt = 
         con.prepareStatement("INSERT INTO XAMin (f1,f2) VALUES (?, ?)");
         pstmt.setInt(1,1);
         pstmt.setString(2,xid.toString());
         pstmt.executeUpdate();

         // Commit the transaction.
         xaRes.end(xid,XAResource.TMSUCCESS);
         xaRes.commit(xid,true);

         // Cleanup.
         con.close();
         xaCon.close();

         // Open a new connection and read back the record to verify that it worked.
         con = DriverManager.getConnection(connectionUrl);
         ResultSet rs = con.createStatement().executeQuery("SELECT * FROM XAMin");
         rs.next();
         System.out.println("Read -&gt; xid = " + rs.getString(2));
         rs.close();
         con.close();
      } 

      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }
   }
}


class XidImpl implements Xid {

   public int formatId;
   public byte[] gtrid;
   public byte[] bqual;
   public byte[] getGlobalTransactionId() {return gtrid;}
   public byte[] getBranchQualifier() {return bqual;}
   public int getFormatId() {return formatId;}

   XidImpl(int formatId, byte[] gtrid, byte[] bqual) {
      this.formatId = formatId;
      this.gtrid = gtrid;
      this.bqual = bqual;
   }

   public String toString() {
      int hexVal;
      StringBuffer sb = new StringBuffer(512);
      sb.append("formatId=" + formatId);
      sb.append(" gtrid(" + gtrid.length + ")={0x");
      for (int i=0; i&lt;gtrid.length; i++) {
         hexVal = gtrid[i]&amp;0xFF;
         if ( hexVal &lt; 0x10 )
            sb.append("0" + Integer.toHexString(gtrid[i]&amp;0xFF));
         else
            sb.append(Integer.toHexString(gtrid[i]&amp;0xFF));
         }
         sb.append("} bqual(" + bqual.length + ")={0x");
         for (int i=0; i&lt;bqual.length; i++) {
            hexVal = bqual[i]&amp;0xFF;
            if ( hexVal &lt; 0x10 )
               sb.append("0" + Integer.toHexString(bqual[i]&amp;0xFF));
            else
               sb.append(Integer.toHexString(bqual[i]&amp;0xFF));
         }
         sb.append("}");
         return sb.toString();
      }

      // Returns a globally unique transaction id.
      static byte [] localIP = null;
      static int txnUniqueID = 0;
      static Xid getUniqueXid(int tid) {

      Random rnd = new Random(System.currentTimeMillis());
      txnUniqueID++;
      int txnUID = txnUniqueID;
      int tidID = tid;
      int randID = rnd.nextInt();
      byte[] gtrid = new byte[64];
      byte[] bqual = new byte[64];
      if ( null == localIP) {
         try {
            localIP = Inet4Address.getLocalHost().getAddress();
         }
         catch ( Exception ex ) {
            localIP =  new byte[] { 0x01,0x02,0x03,0x04 };
         }
      }
      System.arraycopy(localIP,0,gtrid,0,4);
      System.arraycopy(localIP,0,bqual,0,4);

      // Bytes 4 -&gt; 7 - unique transaction id.
      // Bytes 8 -&gt;11 - thread id.
      // Bytes 12-&gt;15 - random number generated by using seed from current time in milliseconds.
      for (int i=0; i&lt;=3; i++) {
         gtrid[i+4] = (byte)(txnUID%0x100);
         bqual[i+4] = (byte)(txnUID%0x100);
         txnUID &gt;&gt;= 8;
         gtrid[i+8] = (byte)(tidID%0x100);
         bqual[i+8] = (byte)(tidID%0x100);
         tidID &gt;&gt;= 8;
         gtrid[i+12] = (byte)(randID%0x100);
         bqual[i+12] = (byte)(randID%0x100);
         randID &gt;&gt;= 8;
      }
      return new XidImpl(0x1234, gtrid, bqual);
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">請參閱</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="afbb776f-05dc-4e79-bb25-2c340483e401.htm">以 JDBC 驅動程式執行交易</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">將有關本主題的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\d感謝您的意見反應。開發人員撰寫小組會使用您的意見反應改善文件集。檢閱意見反應的同時，我們可能會傳送電子郵件給您要求提供進一步說明或是解決方案的意見。電子郵件地址不會用於任何其他目的，檢閱後將會刪除。%0\A如需有關%20Microsoft%20隱私權原則的詳細資訊，請參閱%20http://privacy.microsoft.com/zh-tw/default.aspx。%0\A%0\d','客戶回函');">意見反應</a>傳送給 Microsoft。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.著作權所有，並保留一切權利。</a></p></span></div></div></body></html>